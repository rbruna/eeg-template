function headmodel = myom_addcoils ( headmodel, grid, sens )

% Based on FiedTrip functions:
% * ft_leadfield_openmeeg by Daniel D.E. Wong, Sarang S. Dalal
%
% Based on the OpenMEEG functions:
% * openmeeg_dsm by Alexandre Gramfort
% * openmeeg_megm by Emmanuel Olivi


% Gets the sensors type.
ismeg = isfield ( sens, 'coilpos' ) &&  isfield ( sens, 'coilori' );
iseeg = isfield ( sens, 'elecpos' );

% Checks that the sensors are MEG.
if ~ismeg, error ( 'This function can only by used with a MEG sensor definition.' ); end

% Gets sure that the sensors are correctly identified.
if ~xor ( ismeg, iseeg ), error ( 'The sensor type could not be identified as EEG or MEG. Aborting.\n' ); end


global my_silent
my_silent  = ~isempty ( my_silent ) && my_silent;


% Adds OpenMEEG to the path.
ft_hastoolbox ( 'openmeeg', 1, 1 );

% Checks the OpenMEEG installation.
myom_checkom

% Checks the geometrical definition of the head model.
headmodel = myom_check_headmodel ( headmodel );

% Sanitizes the grid.
grid      = my_fixgrid ( grid );


% Sets the temporal base name.
basename  = tempname;

% Writes the dipole file.
myom_write_dipoles ( basename, grid )

% Writes the geometry files.
myom_write_geometry ( basename, headmodel )

% Writes the gradiometers file.
myom_save_full ( cat ( 2, sens.coilpos, sens.coilori ), sprintf ( '%s_sens.txt', basename ), 'ascii' );


% Checks if the sources definition has changed.
if ~isfield ( headmodel, 's2mm' ) || ...
        ~isfield ( headmodel, 'grid' ) || ...
        ~isequal ( grid, headmodel.grid )
    
%     % Calculates the magnetic flux generated by the sources.
%     headmodel.s2mm = mycd_flux ( grid.pos ( grid.inside, : ), sens.coilpos, sens.coilori );
    
    % Stores the source definition.
    headmodel.grid = grid;
    
    
    % Calculates the dipoles to coils matrix using OpenMEEG.
    if ~my_silent
        status = system ( sprintf ( 'om_assemble -ds2mm "%s.dip" "%s_sens.txt" "%s_s2mm.mat"\n', basename, basename, basename ) );
    else
        [ status, output ] = system ( sprintf ( 'om_assemble -ds2mm "%s.dip" "%s_sens.txt" "%s_s2mm.mat"\n', basename, basename, basename ) );
    end
    
    % Checks for the completion of the execution.
    if status ~= 0
        if my_silent, fprintf ( 1, '%s', output ); end
        fprintf ( 2, 'OpenMEEG program ''om_assemble'' exited with error code %i.\n', status );
        
        % Removes all the temporal files and exits.
        delete ( sprintf ( '%s*', basename ) );
        return
    end
    
    % Recovers the calculated matrix.
    headmodel.s2mm = importdata ( sprintf ( '%s_s2mm.mat', basename ) );
end

% Checks if the sensor definition has changed.
if ~isfield ( headmodel, 'h2mm' ) || ...
    ~isfield ( headmodel, 'grad' ) || ...
    ~isequal ( sens, headmodel.grad )

    % Calculates the head surface to coils matrix using OpenMEEG.
    if ~my_silent
        status = system ( sprintf ( 'om_assemble -h2mm "%s.geom" "%s.cond" "%s_sens.txt" "%s_h2mm.mat"\n', basename, basename, basename, basename ) );
    else
        [ status, output ] = system ( sprintf ( 'om_assemble -h2mm "%s.geom" "%s.cond" "%s_sens.txt" "%s_h2mm.mat"\n', basename, basename, basename, basename ) );
    end
    
    % Checks for the completion of the execution.
    if status ~= 0
        if my_silent, fprintf ( 1, '%s', output ); end
        fprintf ( 2, 'OpenMEEG program ''om_assemble'' exited with error code %i.\n', status );
        
        % Removes all the temporal files and exits.
        delete ( sprintf ( '%s*', basename ) );
        return
    end
    
    % Recovers the calculated matrix.
    headmodel.h2mm = importdata ( sprintf ( '%s_h2mm.mat', basename ) );
    
    % Stores the sensor definition.
    headmodel.grad = sens;
end


% Removes all the temporal files.
delete ( sprintf ( '%s*', basename ) );
